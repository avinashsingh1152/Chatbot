// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: grpcProto/chatbot.proto

package grpcProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatbotService_SayHello_FullMethodName   = "/chatbot.ChatbotService/SayHello"
	ChatbotService_GetBotData_FullMethodName = "/chatbot.ChatbotService/GetBotData"
)

// ChatbotServiceClient is the client API for ChatbotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatbotServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	GetBotData(ctx context.Context, in *ChatBotRequest, opts ...grpc.CallOption) (*ChatBotResponse, error)
}

type chatbotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatbotServiceClient(cc grpc.ClientConnInterface) ChatbotServiceClient {
	return &chatbotServiceClient{cc}
}

func (c *chatbotServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, ChatbotService_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotServiceClient) GetBotData(ctx context.Context, in *ChatBotRequest, opts ...grpc.CallOption) (*ChatBotResponse, error) {
	out := new(ChatBotResponse)
	err := c.cc.Invoke(ctx, ChatbotService_GetBotData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatbotServiceServer is the server API for ChatbotService service.
// All implementations must embed UnimplementedChatbotServiceServer
// for forward compatibility
type ChatbotServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	GetBotData(context.Context, *ChatBotRequest) (*ChatBotResponse, error)
	mustEmbedUnimplementedChatbotServiceServer()
}

// UnimplementedChatbotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatbotServiceServer struct {
}

func (UnimplementedChatbotServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedChatbotServiceServer) GetBotData(context.Context, *ChatBotRequest) (*ChatBotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotData not implemented")
}
func (UnimplementedChatbotServiceServer) mustEmbedUnimplementedChatbotServiceServer() {}

// UnsafeChatbotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatbotServiceServer will
// result in compilation errors.
type UnsafeChatbotServiceServer interface {
	mustEmbedUnimplementedChatbotServiceServer()
}

func RegisterChatbotServiceServer(s grpc.ServiceRegistrar, srv ChatbotServiceServer) {
	s.RegisterService(&ChatbotService_ServiceDesc, srv)
}

func _ChatbotService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatbotService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotService_GetBotData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotServiceServer).GetBotData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatbotService_GetBotData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotServiceServer).GetBotData(ctx, req.(*ChatBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatbotService_ServiceDesc is the grpc.ServiceDesc for ChatbotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatbotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatbot.ChatbotService",
	HandlerType: (*ChatbotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ChatbotService_SayHello_Handler,
		},
		{
			MethodName: "GetBotData",
			Handler:    _ChatbotService_GetBotData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcProto/chatbot.proto",
}
